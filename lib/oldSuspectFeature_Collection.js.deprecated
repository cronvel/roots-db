


// Old suspect feature




Collection.prototype.addMetaLink = function collectionAddMetaLink( key , property , collectionName )
{
	var self = this ;
	// Be careful: this.world.collections does not contains this collection at this time: we are still in the constructor!
	
	var getter = function getter()
	{
		var witness , document = this[''] , linkCollection = self.world.collections[ collectionName ] ;
		
		if ( ! document.suspected || this[ property ] !== undefined )
		{
			if ( ! ( document.meta[ property ] instanceof rootsDb.DocumentWrapper ) || this[ property ] != document.meta[ property ].id )	// jshint ignore:line
			{
				//console.log( '### Link get ###' ) ;
				document.meta[ property ] = linkCollection.get( this[ property ] ) ;
			}
		}
		else
		{
			// Here we have no ID -- erf, idea :) -- about what we will get
			if (
				! ( document.meta[ property ] instanceof rootsDb.DocumentWrapper ) ||
				! ( witness = document.meta[ property ].witness ) ||
				witness.property !== property ||
				witness.document !== document ||
				witness.type !== 'link'
			)
			{
				//console.log( '### Link describe suspect ###' ) ;
				document.meta[ property ] = rootsDb.DocumentWrapper( linkCollection , null , {
					suspected: true ,
					witness: {
						document: document ,
						property: property ,
						type: 'link'
					}
				} ) ;
			}
		}
		
		return document.meta[ property ] ;
	} ;
	
	
	var setter = function setter( linkDocument )
	{
		//var linkCollection = self.world.collections[ collectionName ] ;
		
		// Throw error or not?
		if ( ! ( linkDocument instanceof rootsDb.DocumentWrapper ) || linkDocument.collection.name !== collectionName ) { return ; }
		
		var document = this[''] ;
		
		this[ property ] = linkDocument.id ;
		document.meta[ property ] = linkDocument ;
	} ;
	
	
	Object.defineProperty( this.suspectedBase , key , {
		configurable: true ,
		get: getter ,
		set: setter
	} ) ;
} ;



Collection.prototype.addMetaBacklink = function collectionAddMetaBacklink( key , property , collectionName )
{
	var self = this ;
	// Be careful: this.world.collections does not contains this collection at this time: we are still in the constructor!
	
	var getter = function getter()
	{
		var witness , fingerprint = {} , document = this[''] , backlinkCollection = self.world.collections[ collectionName ] ;
		
		if ( ! document.suspected || document.id )
		{
			fingerprint[ property ] = document.id ;
			fingerprint = self.createFingerprint( fingerprint ) ;
			
			if ( ! ( document.meta[ property ] instanceof rootsDb.BatchWrapper ) || document.meta[ property ].fingerprint.$ != fingerprint.$ )	// jshint ignore:line
			{
				//console.log( '### Backlink collect ###' , fingerprint ) ;
				document.meta[ property ] = backlinkCollection.collect( fingerprint ) ;
			}
		}
		else
		{
			// Here we have no ID -- erf, idea :) -- about what we will get
			if (
				! ( document.meta[ property ] instanceof rootsDb.BatchWrapper ) ||
				! ( witness = document.meta[ property ].witness ) ||
				witness.property !== property ||
				witness.document !== document ||
				witness.type !== 'backlink'
			)
			{
				//console.log( '### Backlink describe suspect ###' ) ;
				document.meta[ property ] = rootsDb.BatchWrapper( backlinkCollection , null , {
					suspected: true ,
					witness: {
						document: document ,
						property: property ,
						type: 'backlink'
					}
				} ) ;
			}
		}
		
		return document.meta[ property ] ;
	} ;
	
	
	var setter = function setter()	// linkDocument )
	{
		throw new Error( 'Not done ATM!' ) ;
		
		//var backlinkCollection = self.world.collections[ collectionName ] ;
		/*
		// Throw error or not?
		if ( ! ( linkDocument instanceof rootsDb.DocumentWrapper ) || linkDocument.collection.name !== collectionName ) { return ; }
		
		var document = this[''] ;
		
		this[ property ] = linkDocument.id ;
		document.meta[ property ] = linkDocument ;
		* /
	} ;
	
	Object.defineProperty( this.suspectedBase , key , {
		configurable: true ,
		get: getter ,
		set: setter
	} ) ;
} ;


